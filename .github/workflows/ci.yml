name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run tests weekly to catch dependency issues
    - cron: '0 0 * * 0'

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11']
        pytorch-version: ['1.10.0', '1.13.0', '2.0.0']
        exclude:
          # PyTorch 2.0 requires Python 3.8+
          - python-version: '3.7'
            pytorch-version: '2.0.0'
          # Reduce matrix size for faster CI
          - os: windows-latest
            pytorch-version: '1.10.0'
          - os: macos-latest
            pytorch-version: '1.10.0'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ matrix.pytorch-version }}-${{ hashFiles('**/requirements*.txt', '**/setup.py', '**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ matrix.pytorch-version }}-
          ${{ runner.os }}-pip-${{ matrix.python-version }}-
          ${{ runner.os }}-pip-

    - name: Install PyTorch ${{ matrix.pytorch-version }}
      run: |
        if [ "${{ matrix.pytorch-version }}" == "1.10.0" ]; then
          pip install torch==1.10.0 torchvision==0.11.0 --index-url https://download.pytorch.org/whl/cpu
        elif [ "${{ matrix.pytorch-version }}" == "1.13.0" ]; then
          pip install torch==1.13.0 torchvision==0.14.0 --index-url https://download.pytorch.org/whl/cpu
        else
          pip install torch==2.0.0 torchvision==0.15.0 --index-url https://download.pytorch.org/whl/cpu
        fi
      shell: bash

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-cov pytest-xdist
        pip install numpy scipy scikit-learn matplotlib
        pip install -e .

    - name: Lint with flake8
      run: |
        pip install flake8
        # Stop build if there are Python syntax errors or undefined names
        flake8 temporal_optimizer --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 temporal_optimizer --count --exit-zero --max-complexity=10 --max-line-length=100 --statistics

    - name: Type checking with mypy
      run: |
        pip install mypy types-requests
        mypy temporal_optimizer --ignore-missing-imports || true

    - name: Test with pytest
      run: |
        pytest tests/ -v --cov=temporal_optimizer --cov-report=xml --cov-report=html -n auto

    - name: Upload coverage reports
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.9' && matrix.pytorch-version == '2.0.0'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  benchmark:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install torch torchvision --index-url https://download.pytorch.org/whl/cpu
        pip install -e .
        pip install matplotlib
    
    - name: Run benchmarks
      run: |
        cd benchmarks
        python optimization_comparison.py
        python credit_scoring_reproduction.py
    
    - name: Upload benchmark results
      uses: actions/upload-artifact@v3
      with:
        name: benchmark-results
        path: benchmarks/*.png

  security:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety
    
    - name: Security check with bandit
      run: |
        bandit -r temporal_optimizer -f json -o bandit-report.json || true
    
    - name: Check dependencies with safety
      run: |
        pip freeze | safety check --json --output safety-report.json || true
    
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  docs:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install torch --index-url https://download.pytorch.org/whl/cpu
        pip install -e .
        pip install sphinx sphinx-rtd-theme
    
    - name: Check documentation links
      run: |
        # Check that all internal links in docs are valid
        find docs -name "*.md" -exec grep -l "](.*\.md)" {} \; | while read file; do
          echo "Checking links in $file"
          grep -o "](.*\.md)" "$file" | sed 's/](//;s/)//' | while read link; do
            if [ ! -f "docs/$link" ] && [ ! -f "$link" ]; then
              echo "Broken link: $link in $file"
              exit 1
            fi
          done
        done
    
    - name: Validate README examples
      run: |
        # Extract and validate Python code blocks from README
        python -c "
        import re
        
        with open('README.md', 'r') as f:
            content = f.read()
        
        # Find Python code blocks
        code_blocks = re.findall(r'```python\n(.*?)\n```', content, re.DOTALL)
        
        for i, code in enumerate(code_blocks):
            try:
                compile(code, f'README_example_{i}', 'exec')
                print(f'✓ Code block {i} is valid Python')
            except SyntaxError as e:
                print(f'✗ Code block {i} has syntax error: {e}')
                raise
        "

  performance-regression:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Need full history for comparison
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install torch torchvision --index-url https://download.pytorch.org/whl/cpu
        pip install -e .
        pip install pytest-benchmark
    
    - name: Run performance benchmarks
      run: |
        # Simple performance regression test
        python -c "
        import time
        import torch
        from temporal_optimizer import StableAdam
        
        model = torch.nn.Linear(1000, 1000)
        optimizer = StableAdam(model.parameters())
        
        # Warmup
        for _ in range(10):
            optimizer.zero_grad()
            loss = model(torch.randn(100, 1000)).sum()
            loss.backward()
            optimizer.step()
        
        # Benchmark
        start_time = time.time()
        for _ in range(100):
            optimizer.zero_grad()
            loss = model(torch.randn(100, 1000)).sum()
            loss.backward()
            optimizer.step()
        
        duration = time.time() - start_time
        print(f'StableAdam benchmark: {duration:.3f}s for 100 steps')
        
        # Fail if significantly slower than expected
        if duration > 10.0:  # Adjust threshold as needed
            raise ValueError(f'Performance regression detected: {duration:.3f}s > 10.0s')
        
        print('✓ No performance regression detected')
        "

  memory-test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install torch --index-url https://download.pytorch.org/whl/cpu
        pip install -e .
        pip install memory-profiler psutil
    
    - name: Memory usage test
      run: |
        python -c "
        import torch
        import psutil
        import os
        from temporal_optimizer import StableAdam
        
        def get_memory_mb():
            process = psutil.Process(os.getpid())
            return process.memory_info().rss / 1024 / 1024
        
        print('Testing memory usage...')
        
        # Baseline memory
        baseline = get_memory_mb()
        print(f'Baseline memory: {baseline:.1f} MB')
        
        # Create large model
        model = torch.nn.Sequential(*[torch.nn.Linear(1000, 1000) for _ in range(5)])
        model_memory = get_memory_mb()
        print(f'After model creation: {model_memory:.1f} MB (+{model_memory - baseline:.1f})')
        
        # Create optimizer
        optimizer = StableAdam(model.parameters())
        optimizer_memory = get_memory_mb()
        print(f'After optimizer creation: {optimizer_memory:.1f} MB (+{optimizer_memory - model_memory:.1f})')
        
        # Training steps
        for i in range(50):
            optimizer.zero_grad()
            loss = model(torch.randn(100, 1000)).sum()
            loss.backward()
            optimizer.step()
            
            if i % 10 == 0:
                current_memory = get_memory_mb()
                print(f'Step {i}: {current_memory:.1f} MB')
        
        final_memory = get_memory_mb()
        print(f'Final memory: {final_memory:.1f} MB')
        
        # Check for memory leaks (allow some growth for optimizer state)
        memory_growth = final_memory - optimizer_memory
        if memory_growth > 100:  # Allow up to 100MB growth
            raise ValueError(f'Possible memory leak detected: {memory_growth:.1f} MB growth')
        
        print('✓ No memory leaks detected')
        "