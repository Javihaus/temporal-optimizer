# Release workflow disabled - manual release process
name: Release (Disabled)

on:
  workflow_dispatch:  # Only run manually with explicit trigger
    inputs:
      version:
        description: 'Version to release (e.g., 0.1.0)'
        required: true
        type: string
  # push:
  #   tags:
  #     - 'v*'
  # release:
  #   types: [published]

permissions:
  contents: read

jobs:
  test-before-release:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install torch torchvision --index-url https://download.pytorch.org/whl/cpu
        pip install pytest pytest-cov
        pip install -e .
    
    - name: Run tests
      run: |
        pytest tests/ -v --cov=temporal_optimizer

  build:
    needs: test-before-release
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine wheel

    - name: Build package
      run: |
        python -m build
    
    - name: Verify build
      run: |
        twine check dist/*
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: dist
        path: dist/

  test-install:
    needs: build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.8', '3.11']
    
    steps:
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: dist
        path: dist/
    
    - name: Install PyTorch
      run: |
        pip install torch --index-url https://download.pytorch.org/whl/cpu
    
    - name: Test wheel installation
      run: |
        pip install dist/*.whl
        python -c "
        import temporal_optimizer
        from temporal_optimizer import StableAdam, StableSGD
        import torch
        
        # Test basic functionality
        model = torch.nn.Linear(10, 1)
        optimizer = StableAdam(model.parameters())
        
        # Test optimization step
        loss = torch.randn(1, requires_grad=True)
        loss.backward()
        optimizer.step()
        
        print('‚úì Package installed and working correctly')
        print(f'Version: {temporal_optimizer.__version__}')
        "

  publish-pypi:
    if: github.event_name == 'release' || github.event_name == 'workflow_dispatch'
    needs: [test-before-release, build, test-install]
    runs-on: ubuntu-latest
    environment: release
    permissions:
      id-token: write  # For trusted publishing to PyPI
    
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: dist
        path: dist/
    
    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        repository-url: https://upload.pypi.org/legacy/  # Remove for TestPyPI

  publish-test-pypi:
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    needs: [test-before-release, build, test-install]
    runs-on: ubuntu-latest
    environment: test-release
    permissions:
      id-token: write
    
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: dist
        path: dist/
    
    - name: Publish to Test PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        repository-url: https://test.pypi.org/legacy/

  create-github-release:
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    needs: [test-before-release, build, test-install]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: dist
        path: dist/
    
    - name: Generate changelog
      id: changelog
      run: |
        # Get the tag name
        TAG_NAME=${GITHUB_REF#refs/tags/}
        
        # Get previous tag
        PREVIOUS_TAG=$(git tag --sort=-version:refname | grep -A1 "$TAG_NAME" | tail -1)
        
        if [ -z "$PREVIOUS_TAG" ] || [ "$PREVIOUS_TAG" = "$TAG_NAME" ]; then
          echo "## Changes" >> release_notes.md
          echo "Initial release" >> release_notes.md
        else
          echo "## Changes since $PREVIOUS_TAG" >> release_notes.md
          echo "" >> release_notes.md
          
          # Get commits between tags
          git log --pretty=format:"- %s (%h)" "$PREVIOUS_TAG..$TAG_NAME" >> release_notes.md
        fi
        
        echo "" >> release_notes.md
        echo "## Installation" >> release_notes.md
        echo "\`\`\`bash" >> release_notes.md
        echo "pip install temporal-optimizer==$TAG_NAME" >> release_notes.md
        echo "\`\`\`" >> release_notes.md
    
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        body_path: release_notes.md
        files: |
          dist/*.whl
          dist/*.tar.gz
        draft: false
        prerelease: false

  validate-release:
    if: github.event_name == 'release' || github.event_name == 'workflow_dispatch'
    needs: publish-pypi
    runs-on: ubuntu-latest
    
    steps:
    - name: Wait for PyPI propagation
      run: |
        echo "Waiting for package to be available on PyPI..."
        sleep 300  # Wait 5 minutes for PyPI to propagate
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Test PyPI installation
      run: |
        pip install torch --index-url https://download.pytorch.org/whl/cpu
        
        # Try installing from PyPI
        max_attempts=5
        attempt=1
        
        while [ $attempt -le $max_attempts ]; do
          echo "Installation attempt $attempt/$max_attempts"
          
          if pip install temporal-optimizer --no-cache-dir; then
            echo "‚úì Successfully installed from PyPI"
            
            # Test functionality
            python -c "
            import temporal_optimizer
            from temporal_optimizer import StableAdam, StableSGD
            import torch
            
            model = torch.nn.Linear(10, 1)
            optimizer = StableAdam(model.parameters())
            
            print('‚úì Package working correctly')
            print(f'Version: {temporal_optimizer.__version__}')
            "
            
            exit 0
          else
            echo "Installation failed, attempt $attempt/$max_attempts"
            attempt=$((attempt + 1))
            
            if [ $attempt -le $max_attempts ]; then
              echo "Waiting 60 seconds before retry..."
              sleep 60
            fi
          fi
        done
        
        echo "‚ùå Failed to install from PyPI after $max_attempts attempts"
        exit 1

  update-conda-forge:
    if: github.event_name == 'release'
    needs: [validate-release]
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout conda-forge feedstock
      # This would require setting up a conda-forge feedstock repository
      # For now, just create an issue reminder
      run: |
        echo "üìù TODO: Update conda-forge feedstock"
        echo "1. Fork https://github.com/conda-forge/temporal-optimizer-feedstock"
        echo "2. Update version and hash in recipe/meta.yaml"
        echo "3. Submit PR to conda-forge"

  post-release-notification:
    if: github.event_name == 'release'
    needs: [validate-release]
    runs-on: ubuntu-latest
    
    steps:
    - name: Notify success
      run: |
        echo "üéâ Release completed successfully!"
        echo "‚úÖ Package published to PyPI"
        echo "‚úÖ GitHub release created"
        echo "‚úÖ Installation validated"
        
        # In a real project, you might send notifications to:
        # - Slack/Discord channels
        # - Email lists
        # - Twitter/social media
        # - Documentation update triggers